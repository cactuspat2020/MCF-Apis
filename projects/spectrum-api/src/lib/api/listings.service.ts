/**
 * Listings
 * These APIs allow access to pricing data of offers listed by authorizing selling partners as well as certain competitive pricing data related to offers by other selling partners on Amazon.
 *
 * OpenAPI spec version: v1
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorMessage } from '../model/errorMessage';
import { Offers } from '../model/offers';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ListingsService {

    protected basePath = 'https://sellingpartnerapi-na.amazon.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Returns the top 20 offers for a given MarketplaceId, ASIN/SKU, ItemCondition and search criteria that you specify.
     * @param marketplaceIds Marketplace identifiers. Specifies the marketplace from which offer listings are returned. NOTE: Accepts only single marketplace.
     * @param searchCriteria Provide the search criteria for offers. myOffers- Returns pricing information for your own offer listings, based on the ASIN mapped to the MarketplaceId that you specify. Note that if you submit an ASIN for a product for which you don’t have an offer listing, the operation returns an empty Offers element. This operation returns pricing information for a maximum of 20 offer listings, lowestOfferSummaries- Returns the lowest price offer listings for a specific product by item condition. The listings for the specified product and ItemCondition are placed in offer listing groups, each group representing a different combination of the following six qualifiers - ItemCondition (New, Used, Collectible, Refurbished, or Club), - ItemSubcondition (New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other), FulfillmentChannel (Amazon or Merchant), ShipsDomestically (True, False, or Unknown) – Indicates whether the marketplace specified in the request and the location that the item ships from are in the same country., - ShippingTime (0-2 days, 3-7 days, 8-13 days, or 14 or more days) – Indicates the maximum time within which the item will likely be shipped once an order has been placed, - SellerPositiveFeedbackRating (98-100%, 95-97%, 90-94%, 80-89%, 70-79%, Less than 70%, or Just launched)., – Indicates the percentage of feedback ratings that were positive over the past 12 months, byLowestPrice- Returns the top 20 offers for a given MarketplaceId, ASIN, and ItemCondition that you specify. The top 20 offers are determined by the lowest landed price, which is the price plus shipping. If multiple sellers are charging the same landed price, the results will be returned in random order.
     * @param asin Used to identify products in the given marketplace. Either asin or sku is required.
     * @param sku The SellerSKU that identifies the product to query. Either asin or sku is required.
     * @param itemCondition Filters the offer listings to be considered based on item condition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public offersSearch(marketplaceIds: Array<string>, searchCriteria?: string, asin?: string, sku?: string, itemCondition?: string, observe?: 'body', reportProgress?: boolean): Observable<Offers>;
    public offersSearch(marketplaceIds: Array<string>, searchCriteria?: string, asin?: string, sku?: string, itemCondition?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Offers>>;
    public offersSearch(marketplaceIds: Array<string>, searchCriteria?: string, asin?: string, sku?: string, itemCondition?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Offers>>;
    public offersSearch(marketplaceIds: Array<string>, searchCriteria?: string, asin?: string, sku?: string, itemCondition?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (marketplaceIds === null || marketplaceIds === undefined) {
            throw new Error('Required parameter marketplaceIds was null or undefined when calling offersSearch.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchCriteria !== undefined && searchCriteria !== null) {
            queryParameters = queryParameters.set('searchCriteria', <any>searchCriteria);
        }
        if (asin !== undefined && asin !== null) {
            queryParameters = queryParameters.set('asin', <any>asin);
        }
        if (sku !== undefined && sku !== null) {
            queryParameters = queryParameters.set('sku', <any>sku);
        }
        if (itemCondition !== undefined && itemCondition !== null) {
            queryParameters = queryParameters.set('itemCondition', <any>itemCondition);
        }
        if (marketplaceIds) {
            queryParameters = queryParameters.set('marketplaceIds', marketplaceIds.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Offers>('get',`${this.basePath}/listings/v1/offers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
